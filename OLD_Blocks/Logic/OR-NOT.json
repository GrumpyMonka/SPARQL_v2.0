{
    "data": {
        "image": "",
        "label": false,
        "label_text": "label",
        "line_edit": false,
        "line_edit_text": "",
        "name": "OR-NOT",
        "script": "var flag = false;\nfor(var i = 0; i < x.length; i++){\n\tfor(var j = 0; j < x[i].length; j++){\n\t\tif(Boolean(x[i][j])){\n\t\t\tflag = true;\n\t\t\tbreak;\n\t\t}\n\t}\n}\ny.push(!flag);",
        "type_img": "self"
    },
    "type": "basic"
}
